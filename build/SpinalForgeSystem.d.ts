import SpinalGetFileFromHub from './forge_modules/SpinalGetFileFromHub';
import SpinalApsUpload from './forge_modules/SpinalApsUpload';
import SpinalApsTranslateJob from './forge_modules/SpinalApsTranslateJob';
import SpinalApsWaitJob from './forge_modules/SpinalApsWaitJob';
import { SpinalApsDownloadDerivative } from './forge_modules/SpinalApsDownloadDerivative';
import { Process as spinalProcess } from 'spinal-core-connectorjs';
import { FileVersionModel } from 'spinal-model-file_version_model';
type StateFunc = {
    state: string;
    func: () => Promise<void>;
};
export default class SpinalForgeSystem extends spinalProcess {
    filename: string;
    private static uidCounter;
    uid: number;
    fileVersionModel: FileVersionModel;
    classReady: boolean;
    stateFunc: StateFunc[];
    spinalGetFileFromHub: SpinalGetFileFromHub;
    spinalApsUpload: SpinalApsUpload;
    spinalApsTranslateJob: SpinalApsTranslateJob;
    spinalApsWaitJob: SpinalApsWaitJob;
    spinalApsDownloadDerivative: SpinalApsDownloadDerivative;
    job: Promise<void>;
    urn: string;
    bucketKey: string;
    constructor(fileVersionModel: FileVersionModel, filename: string);
    onchange(): Promise<void>;
    createInfo(): void;
    setupBucketKey(): any;
    createJob(fct: () => Promise<void>): () => Promise<void>;
    addState(stateLabel: string, fct: () => Promise<void>): void;
    init(): void;
    downloadDerivative(): Promise<void>;
    waitConversion(): Promise<void>;
    startConvertion(): Promise<void>;
    uploadFileToForge(): Promise<void>;
    downloadFile(): Promise<void>;
}
export {};
